<?php
/**
 * API endpoint for retrieving vulnerability details
 */
require_once 'config.php';

// Initialize secure session
initSecureSession();

// Check if user is authenticated
if (!isAuthenticated()) {
    header('Content-Type: application/json');
    echo json_encode([
        'success' => false,
        'message' => 'Authentication required'
    ]);
    exit;
}

// Check if vulnerability ID is provided
if (!isset($_GET['id']) || !is_numeric($_GET['id'])) {
    header('Content-Type: application/json');
    echo json_encode([
        'success' => false,
        'message' => 'Invalid vulnerability ID'
    ]);
    exit;
}

$vulnId = (int)$_GET['id'];

// Connect to database
$conn = connectDB();

// Get vulnerability details with asset information
$stmt = $conn->prepare(
    "SELECT v.*, a.asset_name, a.asset_type, a.ip_address, a.criticality as asset_criticality, 
            a.department, a.location
     FROM vulnerabilities v 
     LEFT JOIN assets a ON v.asset_id = a.asset_id 
     WHERE v.vuln_id = ?"
);
$stmt->bind_param("i", $vulnId);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows === 0) {
    header('Content-Type: application/json');
    echo json_encode([
        'success' => false,
        'message' => 'Vulnerability not found'
    ]);
    $conn->close();
    exit;
}

$vulnerability = $result->fetch_assoc();
$stmt->close();

// Get status history
$statusHistory = [];
$stmt = $conn->prepare(
    "SELECT h.*, u.username 
     FROM vulnerability_status_logs h 
     LEFT JOIN users u ON h.changed_by = u.user_id 
     WHERE h.vuln_id = ? 
     ORDER BY h.changed_at DESC"
);
$stmt->bind_param("i", $vulnId);
$stmt->execute();
$historyResult = $stmt->get_result();

while ($row = $historyResult->fetch_assoc()) {
    $statusHistory[] = $row;
}
$stmt->close();

// Get related incidents
$relatedIncidents = [];
$stmt = $conn->prepare(
    "SELECT i.incident_id, i.title, i.severity, i.status 
     FROM incidents i 
     JOIN incident_events ie ON i.incident_id = ie.incident_id 
     JOIN security_events e ON ie.event_id = e.event_id 
     WHERE e.asset_id = ? 
     ORDER BY i.created_at DESC 
     LIMIT 5"
);
$stmt->bind_param("i", $vulnerability['asset_id']);
$stmt->execute();
$incidentResult = $stmt->get_result();

while ($row = $incidentResult->fetch_assoc()) {
    $relatedIncidents[] = $row;
}
$stmt->close();

// Get similar vulnerabilities
$similarVulnerabilities = [];
$stmt = $conn->prepare(
    "SELECT vuln_id, vuln_name, severity, status, asset_id 
     FROM vulnerabilities 
     WHERE (cve_id = ? AND cve_id != '') OR 
           (asset_id = ? AND vuln_id != ?)
     ORDER BY 
        CASE 
            WHEN cve_id = ? THEN 0 
            ELSE 1 
        END, 
        created_at DESC 
     LIMIT 5"
);
$cveId = $vulnerability['cve_id'] ?: '';
$assetId = $vulnerability['asset_id'];
$stmt->bind_param("siis", $cveId, $assetId, $vulnId, $cveId);
$stmt->execute();
$similarResult = $stmt->get_result();

while ($row = $similarResult->fetch_assoc()) {
    // Get asset name
    $assetStmt = $conn->prepare("SELECT asset_name FROM assets WHERE asset_id = ?");
    $assetStmt->bind_param("i", $row['asset_id']);
    $assetStmt->execute();
    $assetResult = $assetStmt->get_result();
    $assetRow = $assetResult->fetch_assoc();
    $row['asset_name'] = $assetRow['asset_name'];
    $assetStmt->close();
    
    $similarVulnerabilities[] = $row;
}
$stmt->close();

// Close the database connection
$conn->close();

// Prepare the response
$response = [
    'success' => true,
    'vulnerability' => $vulnerability,
    'status_history' => $statusHistory,
    'related_incidents' => $relatedIncidents,
    'similar_vulnerabilities' => $similarVulnerabilities
];

// Return details as JSON
header('Content-Type: application/json');
echo json_encode($response);
exit;